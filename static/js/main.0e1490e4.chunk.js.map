{"version":3,"sources":["components/Card/index.js","components/Container/index.js","utils/game.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","src","image","id","imageId","alt","name","Container","children","characters","Game","Object","classCallCheck","this","selected","Set","board","map","character","score","createClass","key","value","clear","randomizeBoard","newBoard","randomIndexSet","size","length","add","Math","floor","random","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","values","Symbol","iterator","next","done","i","push","err","return","has","ModalType","lost","won","Modal","modalType","App","game","state","_this","showModal","selectCharacter","event","stopPropagation","target","console","log","select","parseInt","setGameState","wonTheGame","wrongAnswer","setState","reset","_this2","components_Container","components_Modal","components_Card","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e1490e4.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\"\n\nfunction Card(props) {\n  return (\n    <div className=\"Card\" onClick={props.onClick}>\n      <img src={props.image} id={props.imageId} className=\"Card-img\" alt={props.name} />\n    </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;\n","export const characters = [\n    {\n        \"id\": 1,\n        \"name\": \"Buffy\",\n        \"image\": \"./images/Buffy.png\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Willow\",\n        \"image\": \"./images/Willow.png\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Giles\",\n        \"image\": \"./images/Giles.png\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Xander\",\n        \"image\": \"./images/Xander.png\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Spike\",\n        \"image\": \"./images/Spike.png\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Angel\",\n        \"image\": \"./images/Angel.png\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Tara\",\n        \"image\": \"./images/Tara.png\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"Cordelia\",\n        \"image\": \"./images/Cordelia.png\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"Anya\",\n        \"image\": \"./images/Anya.png\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"Oz\",\n        \"image\": \"./images/Oz.png\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"Faith\",\n        \"image\": \"./images/Faith.png\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Drusilla\",\n        \"image\": \"./images/Dru.png\"\n    }\n]\n\nexport class Game {\n    constructor() {\n        this.characters = characters\n        this.selected = new Set()\n        this.board = this.characters.map(character => character)\n        this.score = 0\n    }\n\n    reset() {\n        this.score = 0\n        this.selected.clear()\n        this.randomizeBoard()\n    }\n\n    randomizeBoard() {\n        const newBoard = []\n        const randomIndexSet = new Set()\n\n        while (randomIndexSet.size < this.board.length) {\n            randomIndexSet.add(Math.floor(Math.random() * 12))\n        }\n\n        for (let i of randomIndexSet.values()) {\n            newBoard.push(this.board[i])\n        }\n\n        this.board = newBoard\n    }\n\n    select(id) {\n        if (this.selected.has(id)) {\n            return false\n        } else {\n            this.selected.add(id)\n            this.score++\n            return true\n        }\n    }\n}\n\n\n","import React from 'react';\nimport \"./style.css\"\n\nexport const ModalType = {\n    lost: \"lost\",\n    won: \"won\"\n}\n\nfunction modalMessage(modalType) {\n    if (modalType == ModalType.lost) {\n        return \"You Lost!\"\n    } else {\n        return \"You Won!\"\n    }\n} \n\nfunction Modal(props) {\n    return (\n        <div className=\"Modal\">\n            {modalMessage(props.modalType)}\n        </div>\n    );\n}\n\nexport default Modal;","import React from \"react\";\nimport Card from \"./components/Card\";\nimport Container from \"./components/Container\";\nimport { Game, characters } from \"./utils/game.js\";\nimport Modal, { ModalType } from \"./components/Modal\"\nimport \"./App.css\";\n\n\n\n\nclass App extends React.Component {\n  game = new Game();\n\n  state = {\n    score: this.game.score,\n    board: this.game.board,\n    showModal: false,\n    modalType: ModalType.lost\n  }\n\n  setGameState() {\n    this.setState({ board: this.game.board, score: this.game.score })\n    console.log(this.state)\n  }\n\n  wrongAnswer() {\n    this.game.reset();\n    this.setGameState()\n    this.setState({ showModal: true, modalType: ModalType.lost })\n\n  }\n\n  wonTheGame() {\n    this.setState({ showModal: true, modalType: ModalType.won })\n  }\n\n  selectCharacter = event => {\n    event.stopPropagation();\n    const id = event.target.id\n    console.log(event.target)\n    const isValidMove = this.game.select(parseInt(id))\n\n    if (!isValidMove) {\n      this.wrongAnswer()\n    } else {\n      this.game.randomizeBoard()\n      this.setGameState()\n\n      if (this.score === 12) {\n        this.wonTheGame()\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1 className=\"title\">Buffy Game</h1>\n        <div className=\"score\">Score: {this.state.score}</div>\n\n        { this.state.showModal &&\n          <Modal modalType={this.state.modalType} />\n        }\n\n        {this.state.board.map(character => (\n          <Card\n            imageId={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            onClick={this.selectCharacter}\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}